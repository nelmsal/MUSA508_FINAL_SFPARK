bold(., i = 1:2, j = 1:2, bold = TRUE, part = "body") %>%
add_footer_row(
.,
values=c("Specificity =  a/(a+c)\nSensitivity =  d/(d+b)\nMisclassification Rate =  (b+c)/(a+b+c+d)"),
colwidths = c(4))
#   False Negative      True Negative
## Ref  No Click      Ref   Click
## Pred No Click      Pred  No Click
#   False Positive      True Positive
## Ref  No Click      Ref   Click
## Pred Click         Pred  Click
# control CV parameters
ctrl = trainControl(
method = "cv",
number = 100,
classProbs=TRUE,
summaryFunction=twoClassSummary
)
library(caret)
park.test.dwtn = data.frame(
occ50 = park.test %>%
filter(quad=='NE') %>% na.omit() %>%
pull(occ50) %>% as.factor(.),
occ50.predict.pct = predict(
lm.dwtn.all,
park.test %>%
filter(quad=='NE') %>% na.omit(),
type= "response")
) %>%
mutate(
occ50.predict  =
as.factor(
ifelse(
occ50.predict.pct > cut_off_opt,
TRUE,
FALSE
)))
testlen = nrow(park.test.dwtn)
park.text.dwtn.mx = caret::confusionMatrix(
park.test.dwtn$occ50.predict,
park.test.dwtn$occ50) %>%
as.matrix(., what = "xtabs") %>%
as.data.frame() %>%
transmute(
Results = c('Predicted\nOutcome'),
Outcome = c("Below 50%\n(FALSE)","Above 50%\n(TRUE)"),
`Below 50%\n(FALSE)` = (`FALSE`/testlen) %>% percent_formatter() %>%
paste(c('(a)','(c)'), ., sep=' '),
`Above 50%\n(TRUE)` = (`TRUE`/testlen) %>% percent_formatter() %>%
paste(c('(b)','(d)'), ., sep=' ')
)
rownames(park.text.dwtn.mx) = NULL
rename_cols = setNames(
c("", "", "Below 50%\n(FALSE)", "Above 50%\n(TRUE)" ),
colnames(park.text.dwtn.mx))
park.text.dwtn.mx %>%
flextable(.) %>%
theme_vanilla(.) %>%
align(.,
align = "center",
part = "header") %>%
align(., j=2:4,
align = "center",
part = "body") %>%
align(., j=1,
align = "center",
part = "body") %>%
set_table_properties(
., layout='autofit') %>%
merge_v(j = ~Results) %>%
set_header_labels(
.,
values = rename_cols) %>%
add_header_row(
.,
values = c('', 'Observed Outcome'),
colwidths = c(2,2)) %>%
bold(., i = 1:2, j = 1:2, bold = TRUE, part = "body") %>%
add_footer_row(
.,
values=c("Specificity =  a/(a+c)\nSensitivity =  d/(d+b)\nMisclassification Rate =  (b+c)/(a+b+c+d)"),
colwidths = c(4))
#   False Negative      True Negative
## Ref  No Click      Ref   Click
## Pred No Click      Pred  No Click
#   False Positive      True Positive
## Ref  No Click      Ref   Click
## Pred Click         Pred  Click
auc.perf = performance(pred, measure ="auc")
AUC = auc.perf@y.values[[1]] %>% round(4)
palette2 = c("#981FAC","#FF006A")
ggplot() +
# geom_density(
#   data=focus.ROC,
#   aes(x = predictions, group=labels),
#   fill='grey90', color='black', lwd=1.5
#   ) +
geom_density(
data=focus.ROC %>%
mutate(
labels = ifelse(
labels==1,
'Above 50% Occupancy',
'Below 50% Occupancy'
)),
aes(x = predictions, group=labels, fill=labels, color=labels),
fill='grey90', lwd=1.25 #, color='orange'
# linetype='dashed'
) +
facet_grid(labels ~ .) +
scale_fill_manual(values = palette2) +
labs(
x = "Probability",
y = "Density of Probabilities",
title = "Predicted Probabilities - Downtown Model",
subtitle = glue("Optimal Cut-Off Rate = {cut_off_opt %>% round(3)}  (dashed line)")
) +
scale_x_continuous(
labels = function(num) num %>% percent_formatter(),
name="Probability") +
geom_vline(xintercept=cut_off_opt,
linetype='dashed') +
theme(strip.text.x = element_text(size = 18),
legend.position = "none") +
plotTheme()
#dev.off()
ggplot() +
# geom_density(
#   data=focus.ROC,
#   aes(x = predictions, group=labels),
#   fill='grey90', color='black', lwd=1.5
#   ) +
geom_density(
data=focus.ROC %>%
mutate(
labels = ifelse(
labels==1,
'Above 50% Occupancy',
'Below 50% Occupancy'
)),
aes(x = predictions, group=labels, fill=labels, color=labels),
fill='grey90', lwd=1.25 #, color='orange'
# linetype='dashed'
) +
facet_grid(labels ~ .) +
scale_fill_manual(values = palette2) +
labs(
x = "Probability",
y = "Density of Probabilities",
title = "Predicted Probabilities - Downtown Model",
subtitle = glue("Optimal Cut-Off Rate = {cut_off_opt %>% percent_formatter(n=1)}  (dashed line)")
) +
scale_x_continuous(
labels = function(num) num %>% percent_formatter(),
name="Probability") +
geom_vline(xintercept=cut_off_opt,
linetype='dashed') +
theme(strip.text.x = element_text(size = 18),
legend.position = "none") +
plotTheme()
library(caret)
# control CV parameters
ctrl = trainControl(
method = "cv",
number = 100,
classProbs=TRUE,
summaryFunction=twoClassSummary
)
# cv LM
park.cv.dwtn = train(
occ50 ~ .,
data=
advertising %>%
dplyr::select(dwtn_vars),
method="glm",
family="binomial",
metric="ROC",
trControl = ctrl)
library(caret)
# control CV parameters
ctrl = trainControl(
method = "cv",
number = 100,
classProbs=TRUE,
summaryFunction=twoClassSummary
)
# cv LM
park.cv.dwtn = train(
occ50 ~ .,
data=
advertising %>%
dplyr::select(dwtn_vars),
method="glm",
family="binomial",
metric="ROC",
trControl = ctrl)
# cv LM
park.cv.dwtn = train(
occ50 ~ .,
data=
park.train.dwtn %>%
dplyr::select(dwtn_vars),
method="glm",
family="binomial",
metric="ROC",
trControl = ctrl)
# cv LM
park.cv.dwtn = train(
occ50 ~ .,
data=
park.train.dwtn %>%
dplyr::select(dwtn_vars) %>%
mutate(occ50 = occ50 %>% as.factor()),
method="glm",
family="binomial",
metric="ROC",
trControl = ctrl)
park.train.dwtn %>%
dplyr::select(dwtn_vars) %>%
mutate(occ50 = occ50 %>% as.factor())
# cv LM
park.cv.dwtn = train(
occ50 ~ .,
data=
park.train.dwtn %>%
dplyr::select(dwtn_vars) %>%
mutate(occ50 = ifelse(occ50==TRUE, 1,0)),
method="glm",
family="binomial",
metric="ROC",
trControl = ctrl)
park.cv.dwtn
library(caret)
# control CV parameters
ctrl = trainControl(
method = "cv",
number = 100,
classProbs=TRUE,
summaryFunction=twoClassSummary
)
# cv LM
park.cv.dwtn = train(
occ50 ~ .,
data=
park.train.dwtn %>%
dplyr::select(dwtn_vars) %>%
mutate(occ50 = ifelse(occ50==TRUE, 1,0)),
method="glm",
family="binomial",
metric="ROC",
trControl = ctrl)
library(caret)
# control CV parameters
ctrl = trainControl(
method = "cv",
number = 100,
classProbs=FALSE,
summaryFunction=twoClassSummary
)
# cv LM
park.cv.dwtn = train(
occ50 ~ .,
data=
park.train.dwtn %>%
dplyr::select(dwtn_vars) %>%
mutate(occ50 = ifelse(occ50==TRUE, 1,0)),
method="glm",
family="binomial",
metric="ROC",
trControl = ctrl)
library(caret)
# control CV parameters
ctrl = trainControl(
method = "cv",
number = 100,
classProbs=TRUE,
summaryFunction=twoClassSummary()
)
library(caret)
# control CV parameters
ctrl = trainControl(
method = "cv",
number = 100,
classProbs=TRUE,
summaryFunction=twoClassSummary(park.train.dwtn %>%
dplyr::select(dwtn_vars) %>%
mutate(occ50 = ifelse(occ50==TRUE, 1,0)))
)
library(caret)
# control CV parameters
ctrl = trainControl(
method = "cv",
number = 100,
classProbs=TRUE,
summaryFunction=twoClassSummary(data=park.train.dwtn %>%
dplyr::select(dwtn_vars) %>%
mutate(occ50 = ifelse(occ50==TRUE, 1,0)), lev=occ50)
)
dwtn_vars
park.train.dwtn.prep =
park.train.dwtn %>%
dplyr::select(dwtn_vars) %>%
mutate(occ50 = ifelse(occ50==TRUE, 1,0))
library(caret)
park.train.dwtn.prep =
park.train.dwtn %>%
dplyr::select(dwtn_vars) %>%
mutate(occ50 = ifelse(occ50==TRUE, 1,0))
# control CV parameters
ctrl = trainControl(
method = "cv",
number = 100,
classProbs=TRUE,
summaryFunction=twoClassSummary(data=park.train.dwtn.prep, park.train.dwtn.prep$occ50)
)
library(caret)
park.train.dwtn.prep =
park.train.dwtn %>%
dplyr::select(dwtn_vars) %>%
mutate(occ50 = ifelse(occ50==TRUE, 1,0))
# control CV parameters
ctrl = trainControl(
method = "cv",
number = 100,
classProbs=TRUE,
summaryFunction=twoClassSummary(data=park.train.dwtn.prep, lev=c(1,0))
)
# control CV parameters
ctrl = trainControl(
method = "cv",
number = 100,
classProbs=TRUE,
summaryFunction=twoClassSummary #(data=park.train.dwtn.prep, lev=c(1,0))
)
# cv LM
park.cv.dwtn = train(
occ50 ~ .,
data=
park.train.dwtn %>%
dplyr::select(dwtn_vars) %>%
mutate(occ50 = ifelse(occ50==TRUE, 1,0)),
method="glm",
family="binomial",
metric="ROC",
trControl = ctrl)
park.train.dwtn.prep
park.train.dwtn.prep$occ50 = park.train.dwtn.prep$occ50 %>% as.factor()
library(caret)
park.train.dwtn.prep =
park.train.dwtn %>%
dplyr::select(dwtn_vars) %>%
mutate(occ50 = ifelse(occ50==TRUE, 1,0))
park.train.dwtn.prep$occ50 = park.train.dwtn.prep$occ50 %>% as.factor()
# control CV parameters
ctrl = trainControl(
method = "cv",
number = 100,
classProbs=TRUE,
summaryFunction=twoClassSummary #(data=park.train.dwtn.prep, lev=c(1,0))
)
# cv LM
park.cv.dwtn = train(
occ50 ~ .,
data=
park.train.dwtn %>%
dplyr::select(dwtn_vars) %>%
mutate(occ50 = ifelse(occ50==TRUE, 1,0)),
method="glm",
family="binomial",
metric="ROC",
trControl = ctrl)
# cv LM
park.cv.dwtn = train(
occ50 ~ .,
data=park.train.dwtn.prep,
method="glm",
family="binomial",
metric="ROC",
trControl = ctrl)
# cv LM
park.cv.dwtn = train(
occ50 ~ .,
data=park.train.dwtn.prep,
method="glm",
family="binomial",
metric="ROC",
trControl = ctrl,
verbose = FALSE)
library(caret)
park.train.dwtn.prep =
park.train.dwtn %>%
dplyr::select(dwtn_vars) %>%
mutate(occ50 = ifelse(occ50==TRUE, "TRUE", "FALSE"))
park.train.dwtn.prep$occ50 = park.train.dwtn.prep$occ50 %>% as.factor()
# control CV parameters
ctrl = trainControl(
method = "cv",
number = 100,
classProbs=TRUE,
summaryFunction=twoClassSummary #(data=park.train.dwtn.prep, lev=c(1,0))
)
# cv LM
park.cv.dwtn = train(
occ50 ~ .,
data=park.train.dwtn.prep,
method="glm",
family="binomial",
metric="ROC",
trControl = ctrl,
verbose = FALSE)
library(caret)
park.train.dwtn.prep =
park.train.dwtn %>%
dplyr::select(dwtn_vars) %>%
mutate(occ50 = ifelse(occ50==TRUE, "ABOVE 50", "BELOW 50"))
park.train.dwtn.prep$occ50 = park.train.dwtn.prep$occ50 %>% as.factor()
# control CV parameters
ctrl = trainControl(
method = "cv",
number = 100,
classProbs=TRUE,
summaryFunction=twoClassSummary #(data=park.train.dwtn.prep, lev=c(1,0))
)
# cv LM
park.cv.dwtn = train(
occ50 ~ .,
data=park.train.dwtn.prep,
method="glm",
family="binomial",
metric="ROC",
trControl = ctrl,
verbose = FALSE)
park.train.dwtn.prep
library(caret)
park.train.dwtn.prep =
park.train.dwtn %>%
dplyr::select(dwtn_vars) %>%
mutate(occ50 = ifelse(occ50==TRUE, "ABOVE50", "BELOW50"))
park.train.dwtn.prep$occ50 = park.train.dwtn.prep$occ50 %>% as.factor()
# control CV parameters
ctrl = trainControl(
method = "cv",
number = 100,
classProbs=TRUE,
summaryFunction=twoClassSummary #(data=park.train.dwtn.prep, lev=c(1,0))
)
# cv LM
park.cv.dwtn = train(
occ50 ~ .,
data=park.train.dwtn.prep,
method="glm",
family="binomial",
metric="ROC",
trControl = ctrl,
verbose = FALSE)
gc()
# cv LM
park.cv.dwtn = train(
occ50 ~ .,
data=park.train.dwtn.prep,
method="glm",
family="binomial",
metric="ROC",
trControl = ctrl,
verbose = FALSE)
library(caret)
park.train.dwtn.prep =
park.train.dwtn %>%
na.omit() %>%
dplyr::select(dwtn_vars) %>%
mutate(occ50 = ifelse(occ50==TRUE, "ABOVE50", "BELOW50"))
park.train.dwtn.prep$occ50 = park.train.dwtn.prep$occ50 %>% as.factor()
# control CV parameters
ctrl = trainControl(
method = "cv",
number = 100,
classProbs=TRUE,
summaryFunction=twoClassSummary #(data=park.train.dwtn.prep, lev=c(1,0))
)
# cv LM
park.cv.dwtn = train(
occ50 ~ .,
data=park.train.dwtn.prep,
method="glm",
family="binomial",
metric="ROC",
trControl = ctrl,
verbose = FALSE)
gc()
summary(park.train.dwtn.prep)
gc()
library(bookdown)
knitr::opts_chunk$set(
echo=TRUE,
include=TRUE,
warning=FALSE,
messages=FALSE,
fig.width = 8,
fig.keep = 'all',
collapse=TRUE,
cache=TRUE,
autodep=TRUE,
results=FALSE
)
options(tigris_class = "sf")
options(scipen = 999)
library(tidyverse)
library(sf)
library(lubridate)
library(tigris)
library(tidycensus)
library(viridis)
